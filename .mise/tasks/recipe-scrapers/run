#!./.venv/bin/python
# mise description="Scrape recipes from the web and store them in a local directory"

from recipe_scrapers import scrape_me
import argparse
import json
import re


# Get the first CLI argument
parser = argparse.ArgumentParser()
parser.add_argument("url", type=str, help="The URL to scrape")
params = parser.parse_args()

scraped = scrape_me(
    # "https://mere.eirik.re/hovedrett/char-siu-inspirert-kjottdeig/", wild_mode=True,
    params.url,
    wild_mode=True,
    # "https://www.hellofresh.no/recipes/char-siu-inspirert-kjottdeig-63ea00c81c9cdaabe476a6c2",
)

methods = {
    # "canonical_url",
    # "cooking_method",
    # "dietary_restrictions",
    # "equipment",
    # "host",
    # "image",
    # "ingredient_groups",
    # "ingredients",
    # "instructions",
    # "instructions_list",
    # "keywords",
    # # "links",  # just a big object of all links on the page
    # "nutrients",
    # "title",
    "to_json",
    # "total_time",
    # "yields",
    # "ratings",
}


def print_info(method: str) -> dict:
    """Prints the information from the scraper."""
    try:
        info = getattr(scraped, method)()
    except Exception as _:
        return {}
    return info if isinstance(info, dict) else {}


def update_keys(recipe: dict, key: str) -> dict:
    match key:
        case "author":
            recipe[key] = {
                "@type": "Person",
                "name": recipe[key],
                "url": recipe["canonical_url"],
            }
            recipe.pop("canonical_url")
        case "canonical_url":
            pass
        case "category":
            recipe["recipeCategory"] = recipe.pop(key)
        case "cook_time":
            recipe["cookTime"] = recipe.pop(key)
        case "cuisine":
            recipe["recipeCuisine"] = recipe.pop(key)
        case "host":
            recipe["publisher"] = {"@type": "Organization", "name": recipe.pop(key)}
        case "image":
            pass
        case "ingredients":
            recipe["recipeIngredient"] = recipe.pop(key)
        case "ingredient_groups":
            recipe.pop(key)
        case "instructions_list":
            recipe["recipeInstructions"] = [
                {"@type": "HowToStep", "text": i} for i in recipe.pop(key)
            ]
        case "instructions":
            recipe.pop(key)
        case "keywords":
            pass
        case "language":
            recipe["inLanguage"] = recipe.pop(key)
        case "nutrients":
            recipe["nutrition"] = {
                "@type": "NutritionInformation",
                **recipe.pop(key),
            }
        case "prep_time":
            recipe["prepTime"] = recipe.pop(key)
        case "site_name":
            pass
        case "title":
            recipe["name"] = recipe.pop(key)
        case "total_time":
            recipe["totalTime"] = recipe.pop(key)
        case "yields":
            recipe["recipeYield"] = recipe.pop(key)
    return recipe


def to_kebab_case(s: str) -> str:
    s = s.lower().replace(" ", "-")
    # Replace æ, ø, and å with ae, o, and a
    s = re.sub(r"æ", "ae", s)
    s = re.sub(r"ø", "o", s)
    s = re.sub(r"å", "a", s)
    return s


for m in methods:
    recipe = print_info(m)
    recipe["@context"] = "https://schema.org"
    recipe["@type"] = "Recipe"
    for key in list(recipe):
        recipe = update_keys(recipe, key)
    recipe["pattern"] = to_kebab_case(recipe["name"])
    print(json.dumps(recipe, indent=2))
